'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _validateTransitionProp = require('./validateTransitionProp');

var _validateTransitionProp2 = _interopRequireDefault(_validateTransitionProp);

var _toggleClass = require('../toggle-class');

var _toggleClass2 = _interopRequireDefault(_toggleClass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TICK = 17; /**
                * This is adapted from Facebook's ReactCSSTransitionGroupChild which is in the React
                * addons and under the BSD License.
                */

var TimedCSSTransitionGroupChild = function (_Component) {
    (0, _inherits3.default)(TimedCSSTransitionGroupChild, _Component);

    function TimedCSSTransitionGroupChild() {
        (0, _classCallCheck3.default)(this, TimedCSSTransitionGroupChild);
        return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(TimedCSSTransitionGroupChild).apply(this, arguments));
    }

    (0, _createClass3.default)(TimedCSSTransitionGroupChild, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.classNameQueue = [];
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.timeout) {
                clearTimeout(this.timeout);
            }
        }
    }, {
        key: 'getRawKey',
        value: function getRawKey() {
            return _react2.default.Children.only(this.props.children).key;
        }
    }, {
        key: 'transition',
        value: function transition(animationType, finishCallback, userSpecifiedDelay) {
            var node = require('react-dom').findDOMNode(this);

            if (!node) {
                if (finishCallback) {
                    finishCallback();
                }
                if (finishCallback) {
                    finishCallback();
                }

                return;
            }

            var className = this.props.name[animationType] || this.props.name + '-' + animationType;
            var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
            var timeout = null;

            var endListener = function endListener(e) {
                if (e && e.target !== node) {
                    return;
                }

                clearTimeout(timeout);

                (0, _toggleClass2.default)(node, className, false);
                (0, _toggleClass2.default)(node, activeClassName, false);

                if (finishCallback) {
                    finishCallback();
                }
            };

            (0, _toggleClass2.default)(node, className, true);

            // Need to do this to actually trigger a transition.
            this.queueClass(activeClassName);

            // Clean-up the animation after the specified delay
            timeout = setTimeout(endListener, userSpecifiedDelay);
        }
    }, {
        key: 'flushClassNameQueue',
        value: function flushClassNameQueue() {
            var _this2 = this;

            this.classNameQueue.forEach(function (className) {
                (0, _toggleClass2.default)(require('react-dom').findDOMNode(_this2), className, true);
            });

            this.classNameQueue.length = 0;
            this.timeout = null;
        }
    }, {
        key: 'queueClass',
        value: function queueClass(className) {
            var _this3 = this;

            this.classNameQueue.push(className);

            if (!this.timeout) {
                this.timeout = setTimeout(function () {
                    _this3.flushClassNameQueue();
                }, TICK);
            }
        }
    }, {
        key: 'chainedCall',
        value: function chainedCall(action, done) {
            var _this4 = this;

            var handlerName = 'after' + action;

            return function () {
                if (_this4.props[handlerName]) {
                    _this4.props[handlerName](_this4.getRawKey());
                }

                if (done) {
                    done();
                }
            };
        }
    }, {
        key: 'componentWillAppear',
        value: function componentWillAppear(done) {
            done = this.chainedCall('Appear', done);

            if (this.props.appear !== false) {
                this.transition('appear', done, this.props.appear);
            } else {
                done();
            }
        }
    }, {
        key: 'componentWillEnter',
        value: function componentWillEnter(done) {
            done = this.chainedCall('Enter', done);

            if (this.props.enter !== false) {
                this.transition('enter', done, this.props.enter);
            } else {
                done();
            }
        }
    }, {
        key: 'componentWillLeave',
        value: function componentWillLeave(done) {
            done = this.chainedCall('Leave', done);

            if (this.props.leave !== false) {
                this.transition('leave', done, this.props.leave);
            } else {
                done();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.Children.only(this.props.children);
        }
    }]);
    return TimedCSSTransitionGroupChild;
}(_react.Component);

TimedCSSTransitionGroupChild.displayName = 'TimedCSSTransitionGroupChild';
TimedCSSTransitionGroupChild.propTypes = {
    children: _react.PropTypes.node,

    name: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.shape({
        enter: _react.PropTypes.string,
        leave: _react.PropTypes.string,
        active: _react.PropTypes.string
    }), _react.PropTypes.shape({
        enter: _react.PropTypes.string,
        enterActive: _react.PropTypes.string,
        leave: _react.PropTypes.string,
        leaveActive: _react.PropTypes.string,
        appear: _react.PropTypes.string,
        appearActive: _react.PropTypes.string
    })]).isRequired,

    appear: _validateTransitionProp2.default,
    enter: _validateTransitionProp2.default,
    leave: _validateTransitionProp2.default,

    afterAppear: _react.PropTypes.func,
    afterEnter: _react.PropTypes.func,
    afterLeave: _react.PropTypes.func
};
exports.default = TimedCSSTransitionGroupChild;