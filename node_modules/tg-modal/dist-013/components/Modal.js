'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ModalDialog = require('./dom/ModalDialog');

var _ModalDialog2 = _interopRequireDefault(_ModalDialog);

var _ModalHeader = require('./dom/ModalHeader');

var _ModalHeader2 = _interopRequireDefault(_ModalHeader);

var _ModalBody = require('./dom/ModalBody');

var _ModalBody2 = _interopRequireDefault(_ModalBody);

var _Backdrop = require('./dom/Backdrop');

var _Backdrop2 = _interopRequireDefault(_Backdrop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Modal = function (_Component) {
    (0, _inherits3.default)(Modal, _Component);

    function Modal(props) {
        (0, _classCallCheck3.default)(this, Modal);

        var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Modal).call(this, props));

        _this.onCancel = function (e, extra) {
            // Don't do anything while animating
            if (_this.state.animating) {
                return;
            }

            if (_this.props.isOpen && !_this.props.isStatic) {
                if (_this.props.onCancel) {
                    _this.props.onCancel(e, extra);
                }
            }
        };

        _this.clearAnimating = function () {
            _this.setState({
                animating: false
            });
        };

        _this.state = {};
        return _this;
    }

    (0, _createClass3.default)(Modal, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.onToggle(this.props.isOpen, this.getToggleProps());
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _this2 = this;

            if (this.props.isOpen !== nextProps.isOpen) {
                this.setState({
                    animating: true
                }, function () {
                    _this2.onToggle(nextProps.isOpen, _this2.getToggleProps());
                });
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            if (this.props.isOpen) {
                this.onToggle(false, this.getToggleProps());
            }
        }
    }, {
        key: 'onToggle',
        value: function onToggle(state, props) {
            if (this.props.onToggle) {
                this.props.onToggle(state, props);
            }
        }
    }, {
        key: 'getToggleProps',
        value: function getToggleProps() {
            return {};
        }
    }, {
        key: 'getAnimatorClass',
        value: function getAnimatorClass() {
            // Should be overwritten by the parent
            return null;
        }
    }, {
        key: 'getAnimatorProps',
        value: function getAnimatorProps() {
            var animating = this.state.animating;


            return {
                transitionName: this.props.transitionName,
                transitionEnter: this.props.transitionDuration,
                transitionLeave: this.props.transitionDuration,
                afterEnter: this.clearAnimating,
                afterLeave: this.clearAnimating,
                animating: animating
            };
        }
    }, {
        key: 'renderModalBody',
        value: function renderModalBody() {
            if (this.props.autoWrap) {
                return _react2.default.createElement(
                    _ModalBody2.default,
                    null,
                    this.props.children
                );
            }

            return this.props.children;
        }
    }, {
        key: 'renderModalHeader',
        value: function renderModalHeader() {
            var _props = this.props;
            var title = _props.title;
            var isStatic = _props.isStatic;


            if (!title) {
                // No title: Return nothing
                return null;
            } else if (typeof title === 'string') {
                // Title is a string, return a ModalHeader
                return _react2.default.createElement(
                    _ModalHeader2.default,
                    { addClose: !isStatic, onCancel: this.onCancel },
                    title
                );
            } else {
                // Fall back to rendering title directly (events should be handled by parent)
                return title;
            }
        }
    }, {
        key: 'renderModal',
        value: function renderModal() {
            var _props2 = this.props;
            var isOpen = _props2.isOpen;
            var isBasic = _props2.isBasic;
            var isStatic = _props2.isStatic;


            if (!isOpen) {
                return [];
            }

            var parts = [_react2.default.createElement(_Backdrop2.default, { isStatic: isStatic, onCancel: this.onCancel, key: 'backdrop' }), _react2.default.createElement(
                _ModalDialog2.default,
                { isBasic: isBasic, onCancel: this.onCancel, key: 'dialog' },
                this.renderModalHeader(),
                this.renderModalBody()
            )];

            return parts;
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(this.getAnimatorClass(), this.getAnimatorProps(), this.renderModal());
        }
    }]);
    return Modal;
}(_react.Component);

Modal.displayName = 'Modal';
Modal.propTypes = {
    isOpen: _react.PropTypes.bool.isRequired,
    onCancel: _react.PropTypes.func.isRequired,
    onConfirm: _react.PropTypes.func,

    children: _react.PropTypes.node,

    isStatic: _react.PropTypes.bool,
    isBasic: _react.PropTypes.bool,
    autoWrap: _react.PropTypes.bool,

    transitionName: _react.PropTypes.string,
    transitionDuration: _react.PropTypes.number,

    title: _react.PropTypes.node,

    // This is internally used
    onToggle: _react.PropTypes.func
};
Modal.defaultProps = {
    autoWrap: false,
    keyboard: true,
    transitionName: 'fade',
    transitionDuration: 300
};
exports.default = Modal;